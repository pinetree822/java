package co.kr.team.food;


import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
public class KcalDao {
	
	
	public static KcalDto selectFname(String searchName) {
		KcalDto dto = null;
		String sql = "select * from foodkcal where fname=?";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			con = getCon();
			ps = con.prepareStatement(sql);
			ps.setString(1, searchName);
			rs = ps.executeQuery();
			if(rs.next()) {
				dto = new KcalDto();
				dto.setNo(rs.getInt("fno"));
				dto.setFname(rs.getString("fname"));
				dto.setKcal(rs.getInt("Kcal"));
			}//if
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbclose(con, ps, rs);
		}//finally
		return dto;
	}//selectMem
	
	public static KcalDto selectno(int no) {
		KcalDto dto = null;
		String sql = "select * from foodkcal where fno=?";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			con = getCon();
			ps = con.prepareStatement(sql);
			ps.setInt(1, no);
			rs = ps.executeQuery();
			if(rs.next()) {
				dto = new KcalDto();
				dto.setNo(rs.getInt("fno"));
				dto.setFname(rs.getString("fname"));
				dto.setKcal(rs.getInt("kcal"));
			}//if
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbclose(con, ps, rs);
		}//finally
		return dto;
	}//selectId
	
	
	public static Vector selFoodName(String foodName) {
		Vector vData = new Vector();;
		String sql = "select * from foodkcal where fname=?";					// name 으로 검색을 하겠다.
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			con = getCon();
			ps = con.prepareStatement(sql);
			ps.setString(1, foodName);
			rs = ps.executeQuery();
			if(rs.next()) {
				Vector v = new Vector();
				v.add(rs.getInt("fno"));
				v.add(rs.getString("fname"));
				v.add(rs.getInt("kcal"));
				vData.add(v);
			}//if
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return vData;
	}
	
	public static boolean insertTno(KcalDto dto) {
		boolean ok = false;
		Connection con = null;
		PreparedStatement ps = null;
		String sql = "insert into pi_food(H_DAY, ID, FOOD) values(?,?,?)";
		try {
			con = getCon();
			ps = con.prepareStatement(sql);
			//? 13개를 채우자
			ps.setString(1,dto.getH_day());
			ps.setString(2,dto.getId());
			ps.setInt(3,dto.getTotalkcal());
			
			int res = ps.executeUpdate();//실행
			if(res==1)ok = true;
			//if문에서 { } 을 빼면 한줄만 적용된다
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			dbclose(con, ps);
		}//finally
		return ok;
	}
	
	
	
	private static void dbclose(Connection con, PreparedStatement ps) {
		if(ps != null) {
			try {
				ps.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//if
		if(con != null) {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//if
	}//dbclose

	private static void dbclose(Connection con, PreparedStatement ps, ResultSet rs) {
		if(rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//if
		dbclose(con, ps);
	}//dbclose
	
	public static Connection getCon() {
		Connection conn = null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		String url = "jdbc:oracle:thin:@172.16.0.101:1522:orcl";
		String user = "scott";
		String password = "tiger";
		try {
			conn = DriverManager.getConnection(url, user, password);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}//getCon
	public static Vector KcalList() {
		Vector vRows = new Vector();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sql = "select * from foodkcal";
		try {
			con = getCon();
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			while(rs.next()) {
				Vector v = new Vector();
				
				v.add(rs.getInt("fno"));
				v.add(rs.getString("fname"));
				v.add(rs.getInt("kcal"));
				vRows.add(v); // <= 빼먹으면 안된다.
			}//while
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbclose(con, ps, rs);
		}//finally
		return vRows;
	}//memList

	
	
}
